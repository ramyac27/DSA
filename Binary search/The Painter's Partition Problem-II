Dilpreet wants to paint his dog's home that has n boards with different lengths. The length of ith board is given by arr[i] where arr[] is an array of n integers. He hired k painters for this work and each painter takes 1 unit time to paint 1 unit of the board.

Return the minimum time to get this job done if all painters start together with the constraint that any painter will only paint continuous boards, say boards numbered [2,3,4] or only board [1] or nothing but not boards [2,4,5].

Input: arr[] = [5, 10, 30, 20, 15], k = 3
Output: 35
Explanation: The most optimal way will be: Painter 1 allocation : [5,10], Painter 2 allocation : [30], Painter 3 allocation : [20,15], Job will be done when all painters finish i.e. at time = max(5+10, 30, 20+15) = 35

class Solution {
    public int subarray_count(int[] arr, int capacity){
        int count=1;
        int sum=0;
        for(int i=0;i<arr.length;i++){
            if(sum+arr[i]<=capacity){
                sum+=arr[i];
            }
            else{
                count++;
                sum=arr[i];
            }
        }
        return count;
    }
    public int minTime(int[] arr, int k) {
        int left=0;
        int right=0;
        for(int i=0;i<arr.length;i++){
            left = Math.max(arr[i],left);
            right =right+arr[i];
        }
        int ans =left;
        while(left<=right){
            int mid=(left+right)/2;
            int count =subarray_count(arr,mid);
            if(count<=k){
                ans =mid;
                right =mid-1;
            }
            else{
                left=mid+1;
            }
        }
        return ans;
        
    }
}
