Input: arr[] = [1, 3, 5, 5, 5, 5, 67, 123, 125], x = 5
Output: [2, 5]
Explanation: First occurrence of 5 is at index 2 and last occurrence of 5 is at index 5

Binary search - without creating new function 

class GFG {
    ArrayList<Integer> find(int arr[], int x) {
        ArrayList<Integer> ans = new ArrayList<>();
        int left =0;
        int right = arr.length-1;
        int first =-1;
        int last =-1;
        while(left<=right){
            int mid = (left+right)/2;
            if(arr[mid]==x){
                first = mid;
                right = mid-1;
            }
            else if(arr[mid]<x){
                left = mid+1;
            }
            else{
                right = mid-1;
            }
        }
        
        left =0;
        right = arr.length-1;
        while(left<=right){
            int mid = (left+right)/2;
            if(arr[mid]==x){
                last = mid;
                left = mid+1;
            }
            else if(arr[mid]<x){
                left = mid+1;
            }
            else{
                right = mid-1;
            }
        }
        
        ans.add(first);
        ans.add(last);
        return ans;
    }
}


Binary search - with new function for returing first and last value 

class GFG {
    
    public int first_last(int arr[], int x, boolean first_last){
        int left =0;
        int right = arr.length-1;
        int ans =-1;
        while(left<=right){
            int mid = (left+right)/2;
            if(arr[mid]==x){
                ans = mid;
                if(first_last){
                    right = mid-1;
                }
                else{
                    left = mid+1;
                }
            }
            else if(arr[mid]<x){
                left = mid+1;
            }
            else{
                right = mid-1;
            }
        }
        return ans;
        
    }
    ArrayList<Integer> find(int arr[], int x) {
        ArrayList<Integer> ans = new ArrayList<>();
        int first = first_last(arr,x,true);
        int last = first_last(arr,x,false);
        ans.add(first);
        ans.add(last);
        return ans;
    }
}

