Given a string s, you need to print the size of the longest possible substring with exactly k unique characters. If no possible substring exists, print -1.

Examples:

Input: s = "aabacbebebe", k = 3
Output: 7
Explanation: "cbebebe" is the longest substring with 3 distinct characters.

Input: s = "aaaa", k = 2
Output: -1
Explanation: There's no substring with 2 distinct characters.

Input: s = "aabaaab", k = 2
Output: 7
Explanation: "aabaaab" is the longest substring with 2 distinct characters.

class Solution {
    public int longestkSubstr(String s, int k) {
        int n = s.length();
        int ans =-1;
        HashMap<Character,Integer> map = new HashMap<>();
        
        int j=0;
        int i=0;
        
        while(j<n){
            map.put(s.charAt(j),map.getOrDefault(s.charAt(j),0)+1);
            
            if(map.size()<k){
                j++;
            }
            else if(map.size()==k){
                ans = Math.max(ans,j-i+1);
                j++;
            }
            else if(map.size()>k){
                while(map.size()>k){
                    map.put(s.charAt(i),map.get(s.charAt(i))-1);
                    if(map.get(s.charAt(i))==0){
                        map.remove(s.charAt(i));
                    }                
                    i++;
                }
                j++;
            }
        }
        return ans;
    }
}
