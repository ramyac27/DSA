https://www.geeksforgeeks.org/problems/nodes-at-given-distance-in-binary-tree/1

class Solution {
    public static void findparent(Node root,HashMap<Node,Node> map){
        Queue<Node> q = new LinkedList<>();
        q.offer(root);
        while(!q.isEmpty()){
            Node curr = q.poll();
            if(curr.left!=null){
                map.put(curr.left,curr);
                q.offer(curr.left);
            }
            if(curr.right!=null){
                map.put(curr.right,curr);
                q.offer(curr.right);
            }
        }
    }
    
    public static Node findtarget(Node root, int target ){
        if(root==null){
            return null;
        }
        if(root.data==target){
            return root;
        }
        Node left = findtarget(root.left,target);
        if(left!=null){
            return left;
        }
        return findtarget(root.right,target);
    }
    
    public static ArrayList<Integer> KDistanceNodes(Node root, int target, int k) {
        HashMap<Node,Node> parent_track = new HashMap<>();
        findparent(root,parent_track);
        HashSet<Node> visited = new HashSet<>();
        Queue<Node> q = new LinkedList<>();
        Node target_node = findtarget(root,target);
        
        q.offer(target_node);
        visited.add(target_node);
        
        int curr_level =0;
        
        while(!q.isEmpty()){
            int size = q.size();
            if(curr_level==k){
                break;
            }
            curr_level++;
            for(int i=0;i<size;i++){
                Node node = q.poll();
                
                if(node.left!=null && !visited.contains(node.left)){
                    q.offer(node.left);
                    visited.add(node.left);
                }
                
                if(node.right!=null && !visited.contains(node.right)){
                    q.offer(node.right);
                    visited.add(node.right);
                }
                
                Node parent = parent_track.get(node);
                if(parent!=null && !visited.contains(parent)){
                    q.offer(parent);
                    visited.add(parent);
                }
            }
        }
        
        ArrayList<Integer> ans = new ArrayList<>();
        while(!q.isEmpty()){
            ans.add(q.poll().data);
        }
        Collections.sort(ans);
        return ans;
    }
};
