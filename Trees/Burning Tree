https://www.geeksforgeeks.org/problems/burning-tree/1

class Solution {
    /*class Node {
        int data;
        Node left;
        Node right;

        Node(int data) {
            this.data = data;
            left = null;
            right = null;
        }
    }*/
    
    public static void parent_track(Node root, HashMap<Node,Node>map){
        Queue<Node> q = new LinkedList<>();
        q.offer(root);
        while(!q.isEmpty()){
            Node curr = q.poll();
            if(curr.left!=null){
                q.offer(curr.left);
                map.put(curr.left,curr);
            }
            if(curr.right!=null){
                q.offer(curr.right);
                map.put(curr.right,curr);
            }
        }
    }
    
    public static Node start_node(Node root,int target){
        if(root==null){
            return null;
        }
        if(root.data==target){
            return root;
        }
        Node left = start_node(root.left,target);
        if(left!=null){
            return left;
        }
        return start_node(root.right,target);
    }
    
    public static int minTime(Node root, int target) {
        HashMap<Node,Node> parent_map = new HashMap<>();
        parent_track(root,parent_map);
        
        Node start = start_node(root,target);
        
        Queue<Node> q = new LinkedList<>();
        q.offer(start);
        
        HashSet<Node> visited = new HashSet<>();
        visited.add(start);
        
        int time=-1;
        
        while(!q.isEmpty()){
            int size = q.size();
            time++;
            for(int i=0;i<size;i++){
                Node node = q.poll();
                
                if(node.left!=null && !visited.contains(node.left)){
                    q.offer(node.left);
                    visited.add(node.left);
                }
                
                if(node.right!=null && !visited.contains(node.right)){
                    q.offer(node.right);
                    visited.add(node.right);
                }
                
                Node parent = parent_map.get(node);
                if(parent!=null && !visited.contains(parent)){
                    q.offer(parent);
                    visited.add(parent);
                }
            }
            
        }
        
        return time;
        
        
    }
}
