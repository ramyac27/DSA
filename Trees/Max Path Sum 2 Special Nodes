Given a binary tree in which each node element contains a number. Find the maximum possible path sum from one special node to another special node.

Note: Here special node is a node that is connected to exactly one different node.

https://www.geeksforgeeks.org/problems/maximum-path-sum/1

class Solution {
    private int sum;
    
    public Solution() {
        this.sum = Integer.MIN_VALUE;
    }
    
     int findMaxPathSum(Node root) {
        if (root == null) {
            return 0;
        }
        
        int lsum = findMaxPathSum(root.left);
        int rsum = findMaxPathSum(root.right);
        
        if (root.left == null && root.right == null) {
            return root.data;
        }
        
        if (root.left == null) {
            return root.data + rsum;
        }
        
        if (root.right == null) {
            return root.data + lsum;
        }
        
        this.sum = Math.max(this.sum, root.data + lsum + rsum);
        return Math.max(root.data + lsum, root.data + rsum);
    }

    public int maxPathSum(Node root) {
        int ans = findMaxPathSum(root);
        
        if (root.left == null || root.right == null) {
            this.sum = Math.max(this.sum, ans);
        }
        
        return this.sum;
    }
}
