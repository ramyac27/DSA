https://www.geeksforgeeks.org/problems/bottom-view-of-binary-tree/1

Bottom View of Binary Tree

Given a binary tree, return an array where elements represent the bottom view of the binary tree from left to right.

Note: If there are multiple bottom-most nodes for a horizontal distance from the root, then the latter one in the level traversal is considered. For example, in the below diagram, 3 and 4 are both the bottommost nodes at a horizontal distance of 0, here 4 will be considered.

                      20
                    /    \
                  8       22
                /   \     /   \
              5      3 4     25
                     /    \      
                 10       14

For the above tree, the output should be 5 10 4 14 25.

Examples :

Input:
       1
     /   \
    3     2
Output: 3 1 2
Explanation: First case represents a tree with 3 nodes and 2 edges where root is 1, left child of 1 is 3 and right child of 1 is 2.

Thus bottom view of the binary tree will be 3 1 2.
Input:
         10
       /    \
      20    30
     /  \
    40   60
Output: 40 20 60 30

Input:
        1
       /   
      2
Output: 2 1


class Pair{
    Node node;
    int val;
    
    Pair(Node node,int val){
        this.node =node;
        this.val = val;
    }
}

class Solution {
    // Function to return a list containing the bottom view of the given tree.
    public ArrayList<Integer> bottomView(Node root) {
        ArrayList<Integer> result = new ArrayList<>();
        if(root==null){
            return result;
        }
        Map<Integer,Integer> map = new TreeMap<>();
        Queue<Pair> q = new LinkedList<>();
        q.add(new Pair(root,0));
        
        while(!q.isEmpty()){
            Pair curr = q.poll();
            Node curr_node = curr.node;
            int curr_val = curr.val;
            
            map.put(curr_val,curr_node.data);
            
            if(curr_node.left!=null){
                q.add(new Pair(curr_node.left,curr_val-1));
            }
            
            if(curr_node.right!=null){
                q.add(new Pair(curr_node.right,curr_val+1));
            }
        }
        
        for(Map.Entry<Integer,Integer> entry :map.entrySet()){
            result.add(entry.getValue());
        }
        
        return result;
        
    }
}
