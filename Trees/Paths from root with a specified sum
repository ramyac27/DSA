https://www.geeksforgeeks.org/problems/paths-from-root-with-a-specified-sum/1

Given a Binary tree and a sum S, print all the paths, starting from root, that sums upto the given sum. Path not necessarily end on a leaf node.

Example 1:

Input : 
sum = 8
Input tree
         1
       /   \
     20      3
           /    \
         4       15   
        /  \     /  \
       6    7   8    9      

Output :
1 3 4
Explanation : 
Sum of path 1, 3, 4 = 8.

Example 2:

Input : 
sum = 38
Input tree
          10
       /     \
     28       13
           /     \
         14       15
        /   \     /  \
       21   22   23   24
Output :
10 28
10 13 15  
Explanation :
Sum of path 10, 28 = 38 and
Sum of path 10, 13, 15 = 38.

class Solution {
    public static void findpath(Node root, int sum, int curr,ArrayList<Integer>list,ArrayList<ArrayList<Integer>>ans){
        list.add(root.data);
        if(root.data+curr==sum){
            ans.add(new ArrayList<Integer>(list));
        }
        if(root.left!=null){
            findpath(root.left,sum,curr+root.data,list,ans);
        }
        if(root.right!=null){
            findpath(root.right,sum,curr+root.data,list,ans);
        }
        list.remove(list.size()-1);
    }
    public static ArrayList<ArrayList<Integer>> printPaths(Node root, int sum) {
        ArrayList<Integer> list = new ArrayList();
        ArrayList<ArrayList<Integer>> ans= new ArrayList<>();
        findpath(root,sum,0,list,ans);
        return ans;
        
    }
}
