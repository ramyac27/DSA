https://www.geeksforgeeks.org/problems/min-distance-between-two-given-nodes-of-a-binary-tree/1

Min distance between two given nodes of a Binary Tree

Given a binary tree with n nodes and two node values, a and b, your task is to find the minimum distance between them. The given two nodes are guaranteed to be in the binary tree and all node values are unique.

Examples :

Input: Tree = [1, 2, 3]
        1
      /  \
     2    3
a = 2, b = 3
Output: 2
Explanation: We need the distance between 2 and 3. Being at node 2, we need to take two steps ahead in order to reach node 3. The path followed will be: 2 -> 1 -> 3. Hence, the result is 2. 


Input: Tree = [11, 22, 33, 44, 55, 66, 77]
        11
      /   \
     22  33
    /  \  /  \
  44 55 66 77
a = 77, b = 22
Output: 3
Explanation: We need the distance between 77 and 22. Being at node 77, we need to take three steps ahead in order to reach node 22. The path followed will be: 77 -> 33 -> 11 -> 22. Hence, the result is 3.

Input: Tree = [1, 2, 3]
        1
      /  \
     2    3
a = 1, b = 3
Output: 1


class GfG {
    
    public static void parent_track(Node root,HashMap<Node,Node>map){
        Queue<Node> q = new LinkedList<>();
        q.offer(root);
        while(!q.isEmpty()){
            Node curr = q.poll();
            if(curr.left!=null){
                map.put(curr.left,curr);
                q.offer(curr.left);
            }
            if(curr.right!=null){
                map.put(curr.right,curr);
                q.offer(curr.right);
            }
        }
    }
    
    public static Node start_node(Node root,int a){
        if(root==null){
            return null;
        }
        if(root.data==a){
            return root;
        }
        Node left = start_node(root.left,a);
        if(left!=null){
            return left;
        }
        return start_node(root.right,a);
    }
    
    int findDist(Node root, int a, int b) {
        HashMap<Node,Node> parent_map = new HashMap<>();
        parent_track(root,parent_map);
        
        HashSet<Node> visited = new HashSet<>();
        
        Node start = start_node(root,a);
        
        Queue<Node> q = new LinkedList<>();
        q.offer(start);
        
        int dist=0;
        
        while(!q.isEmpty()){
            int size = q.size();
            for(int i=0;i<size;i++){
                Node node = q.poll();
                if(node.data==b){
                    return dist;
                }
                
                if(node.left!=null && !visited.contains(node.left)){
                    q.offer(node.left);
                    visited.add(node.left);
                }
                
                if(node.right!=null && !visited.contains(node.right)){
                    q.offer(node.right);
                    visited.add(node.right);
                }
                
                Node parent = parent_map.get(node);
                if(parent!=null && !visited.contains(parent)){
                    q.offer(parent);
                    visited.add(parent);
                }
            }
            dist++;
        }
        
        return -1;
    }
}
