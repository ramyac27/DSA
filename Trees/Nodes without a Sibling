https://www.geeksforgeeks.org/problems/print-all-nodes-that-dont-have-sibling/1

Nodes without a Sibling

Given a Binary Tree, find all the nodes that don't have any siblings. You need to return a list of integers containing all the nodes that don't have a sibling in sorted order (Increasing). Two nodes are said to be siblings if they are present at the same level, and their parents are the same.

Note: The root node can not have a sibling so it cannot be included in our answer. If there are no nodes that do not have a sibling then add-1 in the list.

Examples:

Input: root[] = [37, 20, N, 113]
       37
      /   
    20
    /     
  113 

Output: [20, 113]
Explanation: Nodes 20 and 113 dont have any siblings.

Input: root[] = [1, 2, 3, 4]
       1
      / \
     2   3
    /
     4

Output: [4]
Explanation: Node 4 does not have a sibling.

Input: root[] = [37, 40, N, 13]
       37
      /   
    40
    /     
  13 

Output: [40, 13]
Explanation: Nodes 40 and 13 dont have any siblings.


class Tree {
    public static void havesibling(Node node, ArrayList<Integer> array){
        if(node==null){
            return;
        }
        if(node.left!=null && node.right==null){
            array.add(node.left.data);
        }
        if(node.left==null && node.right!=null){
            array.add(node.right.data);
        }
        
        havesibling(node.left,array);
        havesibling(node.right,array);
    }
    
    ArrayList<Integer> noSibling(Node node) {
        ArrayList<Integer> ans = new ArrayList<>();
        havesibling(node,ans);
        
        if(ans.isEmpty()){
            ans.add(-1);
        }
        
        Collections.sort(ans);
        return ans;
        
    }
}
