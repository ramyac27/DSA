https://www.geeksforgeeks.org/problems/zigzag-tree-traversal/1

Given a binary tree with n nodes. Find the zig-zag level order traversal of the binary tree.
In zig zag traversal starting from the first level go from left to right for odd-numbered levels and right to left for even-numbered levels.

Examples:

Input:
        1
      /   \
     2      3
    / \    /  \
   4   5  6    7
Output: [1, 3, 2, 4, 5, 6, 7]
Explanation:
For level 1 going left to right, we get traversal as {1}.
For level 2 going right to left, we get traversal as {3,2}.
For level 3 going left to right, we get traversal as {4,5,6,7}.
Merging all this traversals in single array we get {1,3,2,4,5,6,7}.

Input:
          7
        /   \
       9     7
     /  \   /   
    8   8  6     
   /  \
  10   9 
Output: [7, 7, 9, 8, 8, 6, 9, 10] 
Explanation:
For level 1 going left to right, we get traversal as {7}.
For level 2 going right to left, we get traversal as {7,9}.
For level 3 going left to right, we get traversal as {8,8,6}.
For level 4 going right to left, we get traversal as {9,10}.
Merging all this traversals in single array we get {7,7,9,8,8,6,9,10}.

Input:
          5
        /   \
       1     9
      / \   / \
     3   2 8   4

Output: [5, 9, 1, 3, 2, 8, 4]
Explanation:
For level 1 going left to right, we get traversal as {5}.
For level 2 going right to left, we get traversal as {9,1}.
For level 3 going left to right, we get traversal as {3,2,8,4}.
Merging all this traversals in single array we get {5,9,1,3,2,8,4}.

class GFG {
    // Function to store the zig zag order traversal of tree in a list.
    ArrayList<Integer> zigZagTraversal(Node root) {
        ArrayList<Integer> ans = new ArrayList<>();
        Queue<Node> q = new LinkedList<>();
        q.add(root);
        boolean leftright = true;
        while(!q.isEmpty()){
            ArrayList<Integer> temp_ans = new ArrayList<>();
            int size = q.size();
            for(int i=0;i<size;i++){
                Node temp = q.poll();
                temp_ans.add(temp.data);
                if(temp.left!=null){
                    q.add(temp.left);
                }
                if(temp.right!=null){
                    q.add(temp.right);
                }
            }
            if(!leftright){
                Collections.reverse(temp_ans);
            }
            ans.addAll(temp_ans);
            leftright =!leftright;
            
        }
        return ans;
    }
}
