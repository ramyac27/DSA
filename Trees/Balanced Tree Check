https://www.geeksforgeeks.org/problems/check-for-balanced-tree/1

Balanced Tree Check

Given a binary tree, determine if it is height-balanced. A binary tree is considered height-balanced if the absolute difference in heights of the left and right subtrees is at most 1 for every node in the tree.

Examples:

Input: root[] = [10, 20, 30, 40, 60]
Output: true
Explanation: The height difference between the left and right subtrees at all nodes is at most 1. Hence, the tree is balanced.

Input: root[] = [1, 2, 3, 4, N, N, N, 5]
Output: false
Explanation: The height difference between the left and right subtrees at node 2 is 2, which exceeds 1. Hence, the tree is not balanced.

Input: root[] = [1, 2, N, N, 3]
Output: false
Explanation: The height difference between the left and right subtrees at node 1 is 2, which exceeds 1. Hence, the tree is not balanced.

class Solution {
    public int height(Node root){
        if(root==null){
            return -1;
        }
        int left = 1+height(root.left);
        int right = 1+height(root.right);
        
        return Math.max(left,right);
    }
    
    public boolean isBalanced(Node root) {
        if(root==null){
            return true;
        }
        int left_height= height(root.left);
        int right_height=height(root.right);
        if(Math.abs(left_height-right_height)>1){
            return false;
        }
        return isBalanced(root.left) && isBalanced(root.right);
    }
}
