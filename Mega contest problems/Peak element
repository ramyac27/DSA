Given an array arr[] where no two adjacent elements are same, find the index of a peak element. An element is considered to be a peak if it is greater than its adjacent elements (if they exist). If there are multiple peak elements, return index of any one of them. Note: Consider the element before the first element and the element after the last element to be negative infinity.

Input Format

n = 7 arr = [1, 2, 4, 5, 7, 8, 3]

Constraints

1 ≤ arr.size() ≤ 10000

Output Format

8


import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int arr[] = new int[n];
        for(int i=0;i<n;i++){
            arr[i]=scanner.nextInt();
        }
        
        int left =0;
        int right=n-1;
        int flag=0;
        while (left <= right) {
            int mid = (left + right) / 2;

            boolean leftSmaller = (mid == 0 || arr[mid] > arr[mid - 1]);
            boolean rightSmaller = (mid == n - 1 || arr[mid] > arr[mid + 1]);

            if (leftSmaller && rightSmaller) {
                System.out.print(arr[mid]);
                flag=1;
                break;
            } else if (mid < n - 1 && arr[mid] < arr[mid + 1]) {
                left = mid + 1; // Peak must be on the right
            } else {
                right = mid - 1; // Peak must be on the left
            }
        }

        if(flag==0){
            System.out.print(-1);
        }
    

    }
}
