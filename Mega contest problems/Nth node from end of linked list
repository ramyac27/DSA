Given a linked list consisting of L nodes and given a number N. The task is to find the Nth node from the end of the linked list. If n is beyond the total number of nodes then return -1.

Note: Create the linked list provided the numbers.

Input Format

N = 9

K = 2

LinkedList: 1->2->3->4->5->6->7->8->9

There are 9 nodes in linked list and we need to find 2nd node from end. 2nd node from end is 8.

Constraints

1 <= L <= 106

1 <= N <= 106

Output Format

8

import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

class Node {
    int data;
    Node next;

    Node(int data) {
        this.data = data;
        this.next = null;
    }
}

public class Solution {
    
    public static Node buildList(int[] arr) {
        if (arr.length == 0) return null;

        Node head = new Node(arr[0]);
        Node current = head;

        for (int i = 1; i < arr.length; i++) {
            current.next = new Node(arr[i]);
            current = current.next;
        }

        return head;
    }

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
        
        Scanner scanner =new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        
        int[] input= new int[n];
        
        for(int i=0;i<n;i++){
            input[i]=scanner.nextInt();
        }
        Node head = buildList(input);
        
        Node temp1=head;
        int ans=(n-k)+1;
        int count=0;
        int final_ans =-1;
        if(temp1==null ||temp1.next==null){
            System.out.print(-1);
        }
        while(temp1!=null){
            count++;
            if(count==ans){
                final_ans= temp1.data;
            }
            else{
                temp1=temp1.next;
            }
        }
        System.out.print(final_ans);
    }
}
