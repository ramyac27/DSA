Given the head of a linked list, the task is to find the middle. For example, the middle of 1-> 2->3->4->5 is 3. If there are two middle nodes (even count), return the second middle. For example, middle of 1->2->3->4->5->6 is 4.

Input: Linked list: 1->2->3->4->5
Output: 3

Explanation: The given linked list is 1->2->3->4->5 and its middle is 3.

class Solution {
    int getMiddle(Node head) {
        Node temp =head;
        int count=0;
        while(temp!=null){
            temp=temp.next;
            count++;
        }
    count=(count/2)+1;
    int count1=0;
    temp=head;
    Node curr=null;
    while(temp!=null && count1!=count){
        curr=temp;
        temp=temp.next;
        count1++;
    }
    return curr.data;
    }
}
