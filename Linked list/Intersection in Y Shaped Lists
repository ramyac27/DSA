Given the head of two singly linked lists, return the point where these two linked lists intersect.

Note: It is guaranteed that the intersected node always exists.

Custom Input Format:

head1 contains the nodes before intersection in list1
head2 contains the nodes before intersection in list2
CommonList contains the nodes after intersection of list1 and list2.

Examples:

Input: head1 : 4 -> 4 -> 4 -> 4 -> 4, head2 : 4 -> 4 -> 4

Output: 4
Explanation: From the above image, it is clearly seen that the common part is 4 -> 4 whose starting point is 4.

class Intersect {
    // Function to find intersection point in Y shaped Linked Lists.
    static Node intersectPoint(Node head1, Node head2) {
        int h1=0;
        int h2=0;
        int k=0;
        Node temp1 =head1;
        Node temp2 = head2;
        while(temp1!=null){
            temp1=temp1.next;
            h1++;
        }
        while(temp2!=null){
            temp2=temp2.next;
            h2++;
        }
        if(h1>h2){
            k=h1-h2;
            temp1=head1;
            temp2=head2;

        }
        else{
            k=h2-h1;
            temp1=head2;
            temp2=head1;
        }
        
        while(k>0){
           temp1=temp1.next;
           k--;
        }
        
        while(temp1!=null && temp2!=null){
            if(temp1==temp2){
                return temp1;
            }
            else{
                temp1=temp1.next;
                temp2=temp2.next;
            }
        }
        return null;
    }
}
